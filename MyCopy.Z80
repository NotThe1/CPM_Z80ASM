;Copy.Z80
;    sample file-to-file copy program
;    at the ccp level, the command;       copy a:x.y b:u.v

; 2019-11-08 Modified for ZMAC RELOCATING MACRO ASSEMBLERand ZML LINKER


BOOT			EQU		0000h				; system reboot 
BDOS			EQU		0005h				; BDOS entry point 
FCB1			EQU		005ch				; first file name    
sourceFCB		EQU		FCB1				; source fcb  
FCB2			EQU		006ch				; second file name 
DefaultBuffer	EQU		0080h				; default buffer 
TPA				EQU		0100h				; beginning of TPA; 
PrintBuffer	EQU		9					; print buffer func# 
scOpenFile		EQU		15					; open file func# 
scCloseFile	EQU		16					; close file func# 
scDeleteFile	EQU		19					; delete file func# 
ReadSeq			EQU		20					; sequential read func# 
WriteSeq		EQU		21					; sequential write
scMakeFile		EQU		22					; make file func#     
; 


		ORG		TPA
CodeStart:
		LD		SP,stack					; set local stack 
		LD		BC,0016
		LD		HL,FCB2
		LD		DE,destFCB
		LDIR								; Move half FCB
		
; name has been removed, zero cr 
		XOR		A							; a = 00h 
		LD		(destCurrentRecord),A		; current rec = 0
; source and dest fcb's ready 
		LD		DE,sourceFCB				; source file 
		CALL	OpenFile					; error if 255 
		LD		DE,msgSourceMissing		; ready message 
		INC     A							; 255 becomes 0 
		CALL	Z, ExitProgram				; done if no file

; source file open, prep dest 
		LD		DE,destFCB					; dest 
		CALL	DeleteFile					; remove if present
		LD		DE,destFCB					; dest 
		CALL	MakeFile					; create the file 
		LD		DE,msgDirSpaceError		; ready message 
		INC		A							; 255 becomes 0 
		CALL	Z, ExitProgram				; done if no dir space
;
;	source file open, dest file open
;	copy until end of file on source
;
Copy:
		LD		DE,sourceFCB				; source 
		CALL	Read						; read next record 
		OR		A							; end of file? 
		JP		NZ,  EndOfFile				; skip write if so
; not end of file, write the record 
		LD		DE,destFCB					; dest 
		CALL	Write						; write the record 
		LD		DE,msgOutOfSpace			; ready message 
		OR		A							; 00 if write ok 
		CALL	NZ,ExitProgram				; end if so 
		JP		Copy						; loop until eof
;
EndOfFile:
; end of file, close dest 
		LD		DE,destFCB					; dest 
		CALL	CloseFile					; 255 if error 
		LD		HL,msgWiteProtect			; ready message 
		INC		A							; 255 becomes 00 
		CALL	Z,ExitProgram				; shouldn't happen
; Copy operation complete, end 
		LD     DE,msgNormal				; ready OK message
;
ExitProgram:
; write message given in de, reboot 
		LD		C,PrintBuffer 
		CALL	BDOS						; write message 
		JP		BOOT						; reboot system
;
;	system interface subroutines
;	(all return directly from BDOS)
; 
OpenFile:
		LD     C,scOpenFile 
		JP     BDOS
; 
CloseFile:
		LD     C,scCloseFile 
		JP     BDOS
; 
DeleteFile:
		LD     C,scDeleteFile 
		JP     BDOS
;
Read:
		LD     C,ReadSeq 
		JP     BDOS
; 
Write:
		LD     C,WriteSeq 
		JP     BDOS
; 
MakeFile: 
		LD     C,scMakeFile 
		JP     BDOS
;
; console messages 
msgSourceMissing:	DB	'no source file$' 
msgDirSpaceError:	DB	'no directory space$' 
msgOutOfSpace:		DB	'out of dat space$' 
msgWiteProtect:	DB	'Write protected?$' 
msgNormal:			DB	'Copy complete$'
;
;	data areas 
destFCB:
		DS		32							; dest fcb 
destCurrentRecord:

; bottom of stack 
		DS		32							; 16 level stack
stack: 

CodeEnd:
