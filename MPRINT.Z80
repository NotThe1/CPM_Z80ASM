; MPRINT.Z80


; Amendment Record
; *****************
; Name          Date            Details of Amendment
; ----          ----            ---------------------
; Frank Martyn  2019-12-08      Working with large buffer
; Frank Martyn  2019-12-08      Working with small buffer
; Frank Martyn  2019-12-07      Initial   coding


;               ==============
;               External Files
;               ==============

            .XLIST
            include   MAC-SC.LIB
            include   MCOPY.LIB
            .LIST

;               =============
;               Local Equates
;               =============

WBOOT       EQU       0000h                  ; system reboot

FCBsrc      EQU       005ch                  ; source fcb
TPA         EQU       0100h                  ; Transient Program Area Start
stackSize   EQU       20H                    ; depth of stack
FALSE       EQU       0                      ; False
TRUE        EQU       -1                     ; True
EOFmark     EQU       01AH                   ; End of file marker
;**************************************************************************
            ORG       TPA

START:
            LD        SP,stack
; set up File
            FileOpen  FCBsrc                 ; Open Source File
            LD        DE,$NoFile             ; ready message
            INC       A                      ; 255 becomes 0
            CALL      Z, Exit                ; done if no file

            CALL      SetParams              ; determine buffer size & Records
ReadLoop0:
            CALL      InitParams             ; init pointers and counts
ReadLoop:
            SeqRd     FCBsrc                 ; read a record
            OR        A
            JP        NZ,PrintStart0         ; jump if at end-of-file
            CALL      UpdReadParams
            JR        NZ,ReadLoop            ; loop if still room in buffer
            LD        HL,(BuffRecMax)
            LD        (availRecs),HL         ; reset available records
            JR        PrintStart             ; start printing the buffer
PrintStart0:

            CALL      UpdReadParams


            LD        A,TRUE
            LD        (EOF),A                ; set EOF to true
PrintStart:
            LD        HL,workBuff            ; set buffer pointer to beginning
            LD        (nextRecLoc),HL

PrintLoop0:
            LD        B,@RecSize             ; get byte count for each record

PrintLoop:
            PUSH      BC                     ; save the byte count
            LD        E,(HL)                 ; set output char in E for sys call
            INC       HL
            PUSH      HL                     ; save next char position
            LstOut                           ; output the character
            POP       HL                     ; restore the pointer
            POP       BC                     ; restore the counter
            DJNZ      PrintLoop              ; keep outputting this record

            PUSH      HL                     ; save the buffer pointer

            LD        HL,(recsRead)          ; keep count of
            DEC       HL                     ;  of the actual number
            LD        (recsRead),HL          ;  of records written
            LD        A,L
            ADD       H                      ; if L= 0 and H = 0 => ZFlag set

            POP       HL                     ; restore the pointer


            JR        NZ,PrintLoop0          ; loop if still data in buffer
            LD        A,(EOF)
            CP        TRUE                   ; are we at end of file ?
            JP        NZ,ReadLoop0           ;  ; do more if not

; finished
            FileCls   FCBsrc
            LD        DE,$Done
            JP        Exit
            JP        WBOOT                  ; exit, via warm boot

UpdateDMA:
; Update current buffer position
            LD        HL,(nextRecLoc)        ; get current position
            LD        DE,@RecSize            ; get CPM record Size
            ADD       HL,DE                  ; add to get target position
            LD        (nextRecLoc),HL        ; update the pointer
; Set DMA to match buffer position
            EX        DE,HL                  ; prepare for sys call
            LD        C,@SetDMA              ; Sys call number
            CALL      @BDOS                  ; Make the system call
            RET

; will return ZFlag set if buffer exhausted
UpdReadParams:
            CALL      UpdateDMA              ; adjust buffer pointer & DMA
; Keep count of the records read
            LD        HL,(recsRead)          ; keep count of
            INC       HL                     ;  of the actual number
            LD        (recsRead),HL          ;  of records read
; Check if there is still room in the buffer
            LD        HL,(availRecs)         ; how many records left in buffer
            DEC       HL
            LD        (availRecs),HL         ; save for later
            LD        A,L
            CP        0
            RET       NZ                     ; exit if L != 0
            ADD       H                      ; L= 0 if H = 0, ZFlag set
            RET                              ; return (check ZFlag)

InitParams:
            LD        HL,(BuffRecMax)
            LD        (availRecs),HL         ; reset available records
            SetDMA    workBuff               ; init the DMA
            LD        DE,0000H
            LD        (recsRead),DE          ; initialize read record count
            LD        DE,workBuff            ; get start of work buffer
            LD        (nextRecLoc),DE        ; establish start of buffer
            CALL      ClearBuff              ; clean the buffer
            RET


SetParams:
            LD        HL,(0006)              ; get BDOS Start
            LD        DE,workBuff            ; get start of work buffer
            LD        (nextRecLoc),DE        ; establish start of buffer
            OR        A                      ; reset CY flag
            SBC       HL,DE                  ; working buffer size
            LD        (buffBytMax),HL        ; save size of buffer
            SHIFTHL_R 7                      ; divide by Record size (080H)
            LD        (BuffRecMax),HL        ; save the number of records
            RET

; clear the buffer
ClearBuff:
            LD        HL,workBuff
            LD        (HL),EOFmark
            LD        DE, workBuff+1
            LD        BC,(buffBytMax)
            DEC       BC
            LDIR
            RET

; write message given in DE, then reboot
Exit:
            PrtStr
            JP        WBOOT                  ; exit, via warm boot

;               =============
;                 Constants
;               =============
; console messages
$NoFile:    DB        'No file$'
$NoDirSpc:  DB        'No directory space$'
$DiskFull:  DB        'Out of data space$'
$WrtProt:   DB        'Write protected?$'
$Done:      DB        'Print complete$'
$FullBuff:  DB        'Buffer Full$'

;               =============
;                   Data
;               =============
FCBdst:
            DS        32                     ; destination fcb
curRec:                                      ; FCB current record

buffBytMax: DS        2                      ; current buffer Record size
BuffRecMax: DS        2                      ; current buffer Record size
availRecs:  DS        2                      ; current buffer available in Buffer
nextRecLoc: DS        2                      ; Location for next record
recsRead    DS        2                      ; actual number of records read
EOF:        DB        FALSE                  ; End of File
label1:
            DS        stackSize              ; 16 level Stack
            ORG       (($/0100H)+1) * 0100H

stack:                                       ; top of Stack

workBuff:                                    ; start of working buffer

            END       START
